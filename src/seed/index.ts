import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcrypt';

const prisma = new PrismaClient();

async function seed() {
  try {
    console.log('üå± Iniciando el proceso de siembra...');

    // Limpiar datos existentes
    await prisma.estadistica.deleteMany();
    await prisma.trabajo.deleteMany();
    await prisma.periodoAcademico.deleteMany();
    await prisma.lineasDeInvestigacion.deleteMany();
    await prisma.bitacora.deleteMany();
    await prisma.usuario.deleteMany();

    console.log('üóëÔ∏è  Datos existentes eliminados');

    // 1. Crear usuarios
    const usuarios = [];
    const usuariosData = [
      {
        name: 'Juan Carlos',
        lastName: 'Rodr√≠guez Garc√≠a',
        email: 'juan.rodriguez@universidad.edu',
        cedula: '12345678',
        role: 'SUPER' as const,
        estado: true
      },
      {
        name: 'Mar√≠a Elena',
        lastName: 'Fern√°ndez L√≥pez',
        email: 'maria.fernandez@universidad.edu',
        cedula: '23456789',
        role: 'EDITOR' as const,
        estado: true
      },
      {
        name: 'Carlos Alberto',
        lastName: 'Mendoza Silva',
        email: 'carlos.mendoza@universidad.edu',
        cedula: '34567890',
        role: 'EDITOR' as const,
        estado: true
      },
      {
        name: 'Ana Sof√≠a',
        lastName: 'Torres Vargas',
        email: 'ana.torres@universidad.edu',
        cedula: '45678901',
        role: 'EDITOR' as const,
        estado: true
      },
      {
        name: 'Roberto',
        lastName: 'G√≥mez Herrera',
        email: 'roberto.gomez@universidad.edu',
        cedula: '56789012',
        role: 'EDITOR' as const,
        estado: false
      }
    ];

    for (const userData of usuariosData) {
      const hashedPassword = await bcrypt.hash('password123', 10);
      const usuario = await prisma.usuario.create({
        data: {
          ...userData,
          password: hashedPassword
        }
      });
      usuarios.push(usuario);
    }

    console.log('üë• 5 usuarios creados');

    // 2. Crear per√≠odos acad√©micos
    const periodos = [];
    const periodosData = [
      '2020-1', '2020-2', '2021-1', '2021-2', '2022-1',
      '2022-2', '2023-1', '2023-2', '2024-1', '2024-2'
    ];

    for (const periodo of periodosData) {
      const periodoAcademico = await prisma.periodoAcademico.create({
        data: { periodo }
      });
      periodos.push(periodoAcademico);
    }

    console.log('üìÖ 10 per√≠odos acad√©micos creados');

    // 3. Crear l√≠neas de investigaci√≥n
    const lineasInvestigacion = [];
    const lineasData = [
      'Inteligencia Artificial y Machine Learning',
      'Desarrollo de Software y Metodolog√≠as √Ågiles',
      'Ciberseguridad y Protecci√≥n de Datos',
      'Internet de las Cosas (IoT)',
      'An√°lisis de Datos y Big Data',
      'Realidad Virtual y Aumentada',
      'Computaci√≥n en la Nube',
      'Blockchain y Criptomonedas',
      'Rob√≥tica y Automatizaci√≥n',
      'Sistemas Distribuidos y Microservicios'
    ];

    for (let i = 0; i < lineasData.length; i++) {
      const lineaInvestigacion = await prisma.lineasDeInvestigacion.create({
        data: {
          nombre: lineasData[i],
          estado: Math.random() > 0.1, // 90% activas
          usuarioId: usuarios[i % usuarios.length].id
        }
      });
      lineasInvestigacion.push(lineaInvestigacion);
    }

    console.log('üî¨ 10 l√≠neas de investigaci√≥n creadas');

    // 4. Crear trabajos
    const trabajos = [];
    const titulosBase = [
      'Implementaci√≥n de algoritmos de aprendizaje autom√°tico',
      'Desarrollo de aplicaciones web responsivas',
      'An√°lisis de vulnerabilidades en sistemas',
      'Dise√±o de arquitecturas IoT escalables',
      'Procesamiento de grandes vol√∫menes de datos',
      'Aplicaciones inmersivas con realidad virtual',
      'Migraci√≥n de aplicaciones a la nube',
      'Implementaci√≥n de contratos inteligentes',
      'Control aut√≥nomo de sistemas rob√≥ticos',
      'Arquitecturas de microservicios distribuidos'
    ];

    const autores = [
      'Garc√≠a Mart√≠nez, Pedro',
      'L√≥pez Hern√°ndez, Carmen',
      'Rodr√≠guez Silva, Miguel',
      'Fern√°ndez Castro, Laura',
      'Mart√≠n Gonz√°lez, Diego',
      'S√°nchez Ruiz, Patricia',
      'Jim√©nez Moreno, Rafael',
      'Mu√±oz Delgado, Isabel',
      'Romero Vega, Alejandro',
      'Torres Navarro, Beatriz',
      'Vargas Ortega, Francisco',
      'Herrera Jim√©nez, Rosa',
      'Guerrero P√©rez, Javier',
      'Morales Ramos, Luc√≠a',
      'Castro Medina, Antonio'
    ];

    for (let i = 0; i < 50; i++) {
      const lineaAleatoria = lineasInvestigacion[Math.floor(Math.random() * lineasInvestigacion.length)];
      const periodoAleatorio = periodos[Math.floor(Math.random() * periodos.length)];
      const autorAleatorio = autores[Math.floor(Math.random() * autores.length)];
      const tituloBase = titulosBase[Math.floor(Math.random() * titulosBase.length)];
      
      const trabajo = await prisma.trabajo.create({
        data: {
          titulo: `${tituloBase} - Caso de estudio ${i + 1}`,
          autor: autorAleatorio,
          lineaDeInvestigacionId: lineaAleatoria.id,
          estado: Math.random() > 0.3 ? 'validado' as const : 'pendiente' as const, // 70% validados
          doc: `documento_${i + 1}.pdf`,
          periodoAcademicoId: periodoAleatorio.id
        }
      });
      trabajos.push(trabajo);
    }

    console.log('üìù 50 trabajos creados');

    // 5. Crear estad√≠sticas por l√≠nea de investigaci√≥n
    for (const linea of lineasInvestigacion) {
      const trabajosDeLinea = trabajos.filter(t => t.lineaDeInvestigacionId === linea.id);
      const cantidadTrabajos = trabajosDeLinea.length;
      const porcentaje = (cantidadTrabajos / trabajos.length) * 100;

      await prisma.estadistica.create({
        data: {
          lineaDeInvestigacionId: linea.id,
          cantidadTrabajos,
          porcentaje: parseFloat(porcentaje.toFixed(2))
        }
      });
    }

    console.log('üìä Estad√≠sticas generadas');

    // 6. Crear entradas de bit√°cora
    const acciones = [
      'LOGIN', 'LOGOUT', 'CREAR_TRABAJO', 'VALIDAR_TRABAJO', 
      'CREAR_LINEA', 'MODIFICAR_LINEA', 'GENERAR_REPORTE'
    ];

    const ips = [
      '192.168.1.100', '192.168.1.101', '10.0.0.50', 
      '172.16.0.25', '192.168.0.200'
    ];

    for (let i = 0; i < 25; i++) {
      const usuarioAleatorio = usuarios[Math.floor(Math.random() * usuarios.length)];
      const accionAleatoria = acciones[Math.floor(Math.random() * acciones.length)];
      const ipAleatoria = ips[Math.floor(Math.random() * ips.length)];
      
      // Fecha aleatoria en los √∫ltimos 30 d√≠as
      const fechaAleatoria = new Date();
      fechaAleatoria.setDate(fechaAleatoria.getDate() - Math.floor(Math.random() * 30));

      await prisma.bitacora.create({
        data: {
          usuarioId: usuarioAleatorio.id,
          accion: accionAleatoria,
          ip: ipAleatoria,
          hora: fechaAleatoria,
          mensaje: `${accionAleatoria} ejecutada por ${usuarioAleatorio.name}`
        }
      });
    }

    console.log('üìã 25 entradas de bit√°cora creadas');

    // Mostrar resumen
    const resumen = await Promise.all([
      prisma.usuario.count(),
      prisma.lineasDeInvestigacion.count(),
      prisma.periodoAcademico.count(),
      prisma.trabajo.count(),
      prisma.estadistica.count(),
      prisma.bitacora.count()
    ]);

    console.log('\nüéâ ¬°Siembra completada exitosamente!');
    console.log('üìà Resumen de datos creados:');
    console.log(`   üë• Usuarios: ${resumen[0]}`);
    console.log(`   üî¨ L√≠neas de investigaci√≥n: ${resumen[1]}`);
    console.log(`   üìÖ Per√≠odos acad√©micos: ${resumen[2]}`);
    console.log(`   üìù Trabajos: ${resumen[3]}`);
    console.log(`   üìä Estad√≠sticas: ${resumen[4]}`);
    console.log(`   üìã Entradas de bit√°cora: ${resumen[5]}`);

  } catch (error) {
    console.error('‚ùå Error durante la siembra:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar la funci√≥n si el archivo se ejecuta directamente
if (import.meta.url === `file://${process.argv[1]}`) {
  seed()
    .catch((error) => {
      console.error(error);
      process.exit(1);
    });
}

export default seed;